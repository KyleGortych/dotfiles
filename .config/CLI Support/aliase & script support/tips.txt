Main concepts for most programming languages

Importing modules 
from module import fn1, fn2, fn3, \
fn4, fn5

Comments
-	Header
/*    
 * title:
 * <insert>
 *
 * Description:
 * <insert>
 *
 * Maintainer: Name
 * Date: 
 */

Temporary list 

/*
 * temporary list | remove when done
 *     1.
 *     2.
 */ 

Doc str contracts
  -	Can be referenced for assertion errors
    mesgs from help() in CLI
  -	Designates who is responsible for errors
    when multiple people work on the same
    file but each person is given multiple
    functions. At end add Maintainer: & Date
    Last Modified:. 

class name();             fn name();
   /*                         /*
    * Description:             * Description:
    *     <insert>             *     <insert> 
    *                          *
    * Attributes:              * Ex. Test Cases: // semi optional              
    *     name: str            *     <insert> 
    *     age:  int            *
    *                          * param, var, invariant, ect.: // invariants |
    * Methods:                 *     <insert>                 // constants &
    *     <insert>             *                              // non mutable
    */                         * Precondition:                
                               *     <insert>
                               *
                            -> * Postcondition: // only for debugging
                            -> *     <insert>
                            -> *
                               * Return:
                               *     <insert>
                               */ 
Testing  
For large test cases, use unit test that
contains all possible conditions. If correct
return correct if not return each test case
line with error.

Asserting pre and post conditions 
assert <args>, ‘description’ // assertion error mesg

precondition assertion errors are end-user fault
postcondition assertion errors is the specified programmer or programmer‘s fault

Question: how to determine between pre and post condition assertion errors 

Modules vs Scripts

Module uses prompt env
$ python#       // python --version
>>> import file

Script runs interpreter or compiler
$ python# file.py

Branchless programming convention

First use if and else for the compiler to
optimize then look at compiled file in asm to
change to branchless when needed. Use vim
macros to search for occurrences were manual
branchless programming wasn’t minimized for
faster implementation. Branchless could cause
slower performance there for only use when
compiler added unassay branches.   

If(a>b) {     int fast_max(int a, int b) {     
return a;          int diff = a-b;
}else{             int dsgn = giff>>31;
return b;          return a-(diff & dsgn);
}             }

Compiling

To view compiled code in asm
  note each compiler has different arguments 

make file parallel compile
see if go build ./ parallel compiles files in current dir

Rust ex.
rustc file name –emit asm

C ex.
gcc name.c -S

Script Languages

Right click on webpage and select view source to see src
Right click inspect to edit in the browser 
Microsoft Office 

Print on one or both sides click print then last dropdown bar layout options 
Command control spacebar opens symbols | no need for inserting equation.
Replace all occurecnes of a word hold crt shift h | H  
Minimalist Framework and Config Dot Files for Terminal

Remove redundancies and debloat workflow

Main terminal emulator mac
-	Created rosette duplicate  

CLI 
-	Fish tab completion for flag args list  
-	open opens an application 
 - open path/path name
 - open -a name
 - open -a “sublime text” // for spaces in app name
-	osascript -e 'quit app "freecad"' // saves and quits app?
-	cd brings you to default home 
-	cd directory path 
-	type cd drag folder from file manager for path
-	ls to list directory contents
-	ls -l list directory contents in rwx/octal 
-	time command | lists length of time for the execution of proceeding command
-	open -e .bash_profile or .bashrc or etc. files 
-	View binary files exception for proprietary flies
-	Parallel downloading for package managers
-	Gnu parallel vs &
-	last | see recent activity 
- neovide -- -p file-name | like vim -p
- cat /etc/shells


python prompt
-	ctrl l | clears 

Network security
-	ping
-	nslookup
-	networksetup -listallhardwareports 

Questions
-	How to organize programming languages lsp clients, frameworks, and compilers | one build system?
-	Should homebrew path be /opt/homebrew or in /usr/local?
-	Change non interactive shell sh to dash by resymlink?
o	readlink /var/select/sh , outputs /bin/dash
-	Check if any scripts including homebrew aren’t POSIX compliant ex. #!/bin/sh shebang  
-	Bench test fish running as a command in dashrc dash shell vs making fish default shell?
 
Migration to Linux 
1.)	 Automate process of transferring
homebrew package-manager | all configs and
tools are installed with distro’s
package-manager also create aliases for the
distros package-manager to reduce command
complexity similar to the commands of
homebrew.
2.)	 

Vim work flow 

1.)	 nnn command n | file manager | q quit | changes path to current directory
2.)	 Vim Tabs | current dir | vim -p file.extention file.extention ./dirname/file.extention ../dirname/file.extention | tabnew & tabfind
3.)	 Vim templates plugin
4.)	 Movements jklh and w b and dw | delet word
5.)	 Fold by shift v then zf highlighted text | za toggles a fold under cursor and zR opens all while zM closes all
6.)	 /word enter | n to toggle between words | :number,number/search/replace
7.)	 / also can move between tags ex. <> {} | /> or /} or /< for <htm>_</htm>
8.)	 :set spell and : set nospell | n to toggle between misspelled words
9.)	 Visual block | ctrl v | to comment | ctrl v move cursor then shift i esc

for files with long lines -- Command --
:NoMatchParen | set nocul | set lz

zt at current cursor row moves view to top

Command :2000 jumps cursor to line 2000
faster than {} jumping paragraphs and dosnt
over shoot like shift g or gg

Blank buffer to enter multiple blank lines
fast enter insert mode enter once then in
normal mode hit number of lines needed
excluding present two then dot command | i
enter esc 15.

Past horizontally 
Copy with v and past | to past 10 use 9 shift p

Past vertically   
Copy line with shift v and past on same line | to past 10 use 9p

Pasting outside vim | (:ALEToggle | set nonumber) then highlight with mouse

df char then dot | delete line segments that aren't aligned   

Visual mode shift v and shift j | highlighted horizontal moved to vertical

Add shift a & shift i, (f char | , and ;), and . aka “dot” commands.

~ to toggle casing char under cursor then w. 
For all upper case… 

Describe Wildmenue as auto suggest/complete command mode   
Wildmenue search and replace for quick function expressions copy past
:8,10 s/search/replace/g out line example also, :%s/search/replace/g entire file.

vim version 8 Visual block increment | vertical 
ctrl v select second index to end & g ctrl a for num increment
Also letter and hex and more
Increment under cursor | ctrl a also decrement ctrl x

Vim ale:
ALEToggle

Bash scripting 

CLI: touch filename.sh
Shebang

Chmod +x ./filename.sh

To run type ./filename.sh
